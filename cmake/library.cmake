find_package(fmt CONFIG REQUIRED)
# target_link_libraries(main PRIVATE fmt::fmt)
# target_link_libraries(main PRIVATE fmt::fmt-header-only)
if(fmt_FOUND)
    set(USE_FMT true)
endif(fmt_FOUND)

find_package(nlohmann_json CONFIG REQUIRED)
# target_link_libraries(main PRIVATE nlohmann_json::nlohmann_json)
# set(nlohmann-json_IMPLICIT_CONVERSIONS OFF)
if(nlohmann_json_FOUND)
    set(USE_NLOHMANN_JSON true)
endif(nlohmann_json_FOUND)

find_package(tinyxml2 CONFIG REQUIRED)
# target_link_libraries(main PRIVATE tinyxml2::tinyxml2)
if(tinyxml2_FOUND)
    set(USE_TINYXML2 true)
endif(tinyxml2_FOUND)

# find_package(toml11 CONFIG REQUIRED)
# target_link_libraries(main PRIVATE toml11::toml11)

find_package(PkgConfig REQUIRED)
pkg_check_modules(tomlplusplus REQUIRED IMPORTED_TARGET tomlplusplus)
# target_link_libraries(main PkgConfig::tomlplusplus)
if(tomlplusplus_FOUND)
    set(USE_TOMLPLUSPLUS true)
endif(tomlplusplus_FOUND)

find_package(yaml-cpp CONFIG REQUIRED)
# target_link_libraries(main PRIVATE yaml-cpp::yaml-cpp)
if(yaml-cpp_FOUND)
    set(USE_YAML_CPP true)
endif(yaml-cpp_FOUND)

find_package(spdlog CONFIG REQUIRED)
# target_link_libraries(main PRIVATE spdlog::spdlog)
# target_link_libraries(main PRIVATE spdlog::spdlog_header_only)
if(spdlog_FOUND)
    set(USE_SPDLOG true)
endif(spdlog_FOUND)

# find_package(absl CONFIG REQUIRED)
# target_link_libraries(main PRIVATE absl::any absl::log absl::base absl::bits)

find_package(mosquitto)
# target_include_directories(main PRIVATE ${MOSQUITTO_INCLUDE_DIRS})
# target_link_libraries(main PRIVATE ${MOSQUITTO_LIBRARIES})
# mosquitto_FOUND are not set
if(MOSQUITTO_LIBRARIES)
    set(USE_MOSQUITTO true)
endif(MOSQUITTO_LIBRARIES)

find_package(Protobuf CONFIG REQUIRED)
# target_link_libraries(main PRIVATE protobuf::libprotoc protobuf::libprotobuf protobuf::libprotobuf-lite)
if(Protobuf_FOUND)
    set(USE_PROTOBUF true)
endif(Protobuf_FOUND)

find_package(Boost COMPONENTS asio system random CONFIG)
if(Boost_FOUND)
    set(USE_BOOST true)
endif(Boost_FOUND)
if(Boost_asio_FOUND)
    set(USE_BOOST_ASIO true)
endif(Boost_asio_FOUND)

find_package(benchmark CONFIG REQUIRED)
# target_link_libraries(main PRIVATE benchmark::benchmark benchmark::benchmark_main)
if(benchmark_FOUND)
    set(USE_BENCHMARK true)
endif(benchmark_FOUND)

find_package(folly CONFIG)
# target_link_libraries(main PRIVATE Folly::folly Folly::folly_deps Folly::follybenchmark Folly::folly_test_util)
if(folly_FOUND)
    set(USE_FOLLY true)
endif(folly_FOUND)

find_package(proxy CONFIG)
# target_link_libraries(main PRIVATE msft_proxy)
if(proxy_FOUND)
    set(USE_PROXY true)
endif(proxy_FOUND)
