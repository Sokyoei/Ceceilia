target("alias")
    set_kind("binary")
    add_files("alias.cpp")
target_end()

target("attribute")
    set_kind("binary")
    add_files("attribute.cpp")
target_end()

target("base_type")
    set_kind("binary")
    add_files("base_type.cpp")
target_end()

target("charconvert_example")
    set_kind("binary")
    add_files("charconvert_example.cpp")
target_end()

target("constexpr")
    set_kind("binary")
    add_files("constexpr.cpp")
target_end()

target("cstrings")
    set_kind("binary")
    add_files("cstrings.c")
target_end()

target("ctimer")
    set_kind("binary")
    add_files("ctimer.c")
target_end()

target("dump")
    set_kind("binary")
    add_files("dump.cpp")
target_end()

target("exceptions")
    set_kind("binary")
    add_files("exceptions.cpp")
target_end()

target("function_call")
    set_kind("binary")
    add_files("function_call.cpp")
target_end()

target("function_pointer")
    set_kind("binary")
    add_files("function_pointer.cpp")
target_end()

target("lambda")
    set_kind("binary")
    add_files("lambda.cpp")
target_end()

-- find_package(OpenMP REQUIRED)
-- add_executable(OpenMP OpenMP.cpp)
-- if(OpenMP_CXX_FOUND)
--     target_link_libraries(OpenMP PUBLIC OpenMP::OpenMP_CXX)
-- endif()
target("OpenMP")
    set_kind("binary")
    add_files("OpenMP.cpp")
target_end()

target("pointers")
    set_kind("binary")
    add_files("pointers.c")
target_end()

target("regular_expressions")
    set_kind("binary")
    add_files("regular_expressions.cpp")
target_end()

target("rvalue_reference")
    set_kind("binary")
    add_files("rvalue_reference.cpp")
target_end()

target("smater_pointer")
    set_kind("binary")
    add_files("smater_pointer.cpp")
target_end()

target("strings")
    set_kind("binary")
    add_files("strings.cpp")
target_end()

target("timer")
    set_kind("binary")
    add_files("timer.cpp")
target_end()

target("type_inference")
    set_kind("binary")
    add_files("type_inference.cpp")
target_end()

target("variable_parameter")
    set_kind("binary")
    add_files("variable_parameter.cpp")
target_end()

target("VLA")
    set_kind("binary")
    add_files("VLA.c")
target_end()

includes("classes")
includes("concurrency")
includes("coroutine")
includes("file")
includes("net")
includes("SIMD")
includes("template")
